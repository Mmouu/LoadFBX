
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script src="/Scripts/threejs//three.js"></script>
    <style>
        * {
            margin: 0px;
            overflow: hidden;
        }
    </style>
</head>
<body>
    @*<div id="info">
            <a href="https://threejs.org" target="_blank" rel="noopener">three.js</a> - FBXLoader<br />
            Character and animation from <a href="https://www.mixamo.com/" target="_blank" rel="noopener">Mixamo</a>
        </div>*@
    <script type="module">

        import * as THREE from '/Scripts/threejs/three.module.js';

        import Stats from '/Scripts/threejs/stats.module.js';

        import { OrbitControls } from '/Scripts/threejs/OrbitControls.js';
        import { FBXLoader } from '/Scripts/threejs/FBXLoader.js';

        var container, stats, controls;
        var camera, scene, renderer, light, mod;

        var clock = new THREE.Clock();

        var mixer;

        init();
        animate();

        function init() {

        container = document.createElement( 'div' );
        document.body.appendChild( container );

        camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 1, 2000000 );
        camera.position.set( 1000, 2000, 2000);

        scene = new THREE.Scene();
        scene.background = new THREE.Color( 0xa0a0a0 );
        @*scene.fog = new THREE.Fog( 0xa0a0a0, 200, 1000 );*@

        light = new THREE.HemisphereLight( 0xffffff, 0x444444 );
        light.position.set( 0, 2000, 0 );
        scene.add( light );

        light = new THREE.DirectionalLight( 0xffffff );
        light.position.set( 0, 2000, 1000 );
        light.castShadow = true;
        light.shadow.camera.top = 180;
        light.shadow.camera.bottom = - 100;
        light.shadow.camera.left = - 120;
        light.shadow.camera.right = 120;
        scene.add( light );

        // scene.add( new CameraHelper( light.shadow.camera ) );

        // ground
        var mesh = new THREE.Mesh(
            new THREE.PlaneBufferGeometry(2000, 2000)
            , new THREE.MeshPhongMaterial({ color: 0x999999, depthWrite: false })
        );
        mesh.rotation.x = - Math.PI / 2;
        mesh.receiveShadow = true;
        scene.add( mesh );

        var grid = new THREE.GridHelper( 20000, 20, 0x000000, 0x000000 );
        grid.material.opacity = 0.2;
        grid.material.transparent = true;
        scene.add( grid );

        // model
        var loader = new FBXLoader();
            loader.load('/FBX/crane.fbx', function (object) {

                mod = object;
                //获取动画
                mixer = new THREE.AnimationMixer(object);

                object.traverse(function (child) {
                    if (child.isMesh) {//材质
                        child.castShadow = true;
                        child.receiveShadow = true;
                    }
                });
        mixer = new THREE.AnimationMixer( object );

        scene.add( object );

        });


        renderer = new THREE.WebGLRenderer( { antialias: true } );
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight );
        renderer.shadowMap.enabled = true;
        container.appendChild( renderer.domElement );

        controls = new OrbitControls( camera, renderer.domElement );
        controls.target.set( 0, 100, 0 );
        controls.update();

        window.addEventListener( 'resize', onWindowResize, false );

        // stats
        stats = new Stats();
        container.appendChild( stats.dom );

        }

        function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

        }

        function animate() {

        requestAnimationFrame( animate );

        var delta = clock.getDelta();
        mod.position.x++;
        //mod.position.y++;
        //mod.position.z++;
        if ( mixer ) mixer.update( delta );

        renderer.render( scene, camera );

        stats.update();

        }

    </script>
</body>

</html>