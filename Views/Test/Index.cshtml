
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <script src="/Scripts/threejs//three.js"></script>
    <style>
        * {
            margin: 0px;
            overflow: hidden;
        }
    </style>
</head>
<body>
    @*<div id="info">
            <a href="https://threejs.org" target="_blank" rel="noopener">three.js</a> - FBXLoader<br />
            Character and animation from <a href="https://www.mixamo.com/" target="_blank" rel="noopener">Mixamo</a>
        </div>*@
    <script type="module">

        import * as THREE from '/Scripts/threejs/three.module.js';

        import Stats from '/Scripts/threejs/stats.module.js';

        //import TWEEN from '/Scripts/threejs/Tween.js';

        import { OrbitControls } from '/Scripts/threejs/OrbitControls.js';
        import { FBXLoader } from '/Scripts/threejs/FBXLoader.js';

        var container, stats, controls;
        var camera, scene, renderer, light, mod;

        var clock = new THREE.Clock();

        var mixer;

        init();
        animate();

        function init() {

        container = document.createElement( 'div' );
        document.body.appendChild( container );

        camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 1, 2000000 );
        camera.position.set( 0, 4000, 4000);

        scene = new THREE.Scene();
        scene.background = new THREE.Color( 0xa0a0a0 );
        @*scene.fog = new THREE.Fog( 0xa0a0a0, 200, 1000 );*@

        light = new THREE.HemisphereLight( 0xffffff, 0x444444 );
        light.position.set( 0, 2000, 0 );
        scene.add( light );

        light = new THREE.DirectionalLight( 0xffffff );
        light.position.set( 0, 2000, 1000 );
        light.castShadow = true;
        light.shadow.camera.top = 180;
        light.shadow.camera.bottom = - 100;
        light.shadow.camera.left = - 120;
        light.shadow.camera.right = 120;
        scene.add( light );

        // scene.add( new CameraHelper( light.shadow.camera ) );

        // ground
        var mesh = new THREE.Mesh(
            new THREE.PlaneBufferGeometry(2000, 2000)
            , new THREE.MeshPhongMaterial({ color: 0x999999, depthWrite: false })
        );
        mesh.rotation.x = - Math.PI / 2;
        mesh.receiveShadow = true;
        //scene.add( mesh );

        var grid = new THREE.GridHelper( 20000, 20, 0x000000, 0x000000 );
        grid.material.opacity = 0.2;
        grid.material.transparent = true;
        scene.add( grid );

        var geometry = new THREE.Geometry();
        var material = new THREE.LineBasicMaterial({ vertexColors: true });
        let p1 = new THREE.Vector3(-8000, 0, -8000);
        let p2 = new THREE.Vector3(-8000, 0, 0);
        let p3 = new THREE.Vector3(-7100, 0, -8000);
        let p4 = new THREE.Vector3(-7100, 0, 0);
        geometry.vertices.push(p1);
        geometry.vertices.push(p2);
        geometry.vertices.push(p3);
        geometry.vertices.push(p4);
        geometry.colors.push(new THREE.Color('#c66131'), new THREE.Color('#c66131'), new THREE.Color('#c66131'), new THREE.Color('#c66131'), new THREE.Color('#c66131'), new THREE.Color('#c66131'));
        //线条
        var line = new THREE.LineSegments(geometry, material);
        scene.add(line);

        // model
        var loader = new FBXLoader();
            loader.load('/FBX/crane.fbx', function (object) {

                mod = object;
                //旋转
                mod.rotateZ(Math.PI / 2);

                console.log(getObjectHalfSize(object));

                //var box3 = new THREE.Box3();
                //box3.setFromObject(object); //获取包围盒
                //var size = box3.getSize();        //获取包围盒的大小，即模型的长宽高
                //object.scale.set(100 / size.x, 100 / size.y * 1.5, 74 / size.z); //见本段注释。换算得到实际大小。

                //var modelObject = object;
                //var size = getObjectHalfSize(modelObject);
                //var radius = Math.sqrt(Math.pow(size.x, 2) + Math.pow(size.y, 2) + Math.pow(size.z, 2));
                //modelObject.scale.multiplyScalar(0.5 / radius);
                //modelObject.position.y = -size.y * (0.5 / radius);
                //modelObject.name = mtlName;
                //scene.add(modelObject);

                mod.position.set(-8000, -0, -8000);
                //获取动画
                mixer = new THREE.AnimationMixer(object);

                object.traverse(function (child) {
                    if (child.isMesh) {//材质
                        child.castShadow = true;
                        child.receiveShadow = true;
                    }
                });
        mixer = new THREE.AnimationMixer( object );

                scene.add(object);

        });


        renderer = new THREE.WebGLRenderer( { antialias: true } );
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight );
        renderer.shadowMap.enabled = true;
        container.appendChild( renderer.domElement );

        controls = new OrbitControls( camera, renderer.domElement );
        controls.target.set( 0, 100, 0 );
        controls.update();

        window.addEventListener( 'resize', onWindowResize, false );

        // stats
        stats = new Stats();
        container.appendChild( stats.dom );

        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize( window.innerWidth, window.innerHeight );

        }

        function animate() {
            requestAnimationFrame( animate );

            var delta = clock.getDelta();
            //mod.position.x++;
            //mod.position.y++;
            //mod.position.z++;

            var z = 10;
            mod.position.z += z;
            if (mod.position.z > 400) {
                mod.position.z = -8000;
            }
            //mod.position.z += z;
            // 物体移动
            //new TWEEN.Tween(grid.position).to({ z: -10 }, 8000).repeat(Infinity).start();

            if ( mixer ) mixer.update( delta );

            renderer.render( scene, camera );

            stats.update();

        }


        function getObjectHalfSize(obj) {
            var objectBox = new THREE.Box3();
            objectBox.setFromObject(obj);
            return objectBox.max.clone().sub(objectBox.min).divideScalar(2);
        }


    </script>
</body>

</html>